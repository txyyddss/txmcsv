name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 替换版本号
        run: |
          sed -i "s/%server_version%/${{ github.event.inputs.version }}/g" ./plugins/AnimatedScoreboard/scoreboards/globalscoreboard.yml
          sed -i "s/%server_version%/${{ github.event.inputs.version }}/g" ./plugins/AnimatedScoreboard/scoreboards/globalnoseason.yml

      - name: 清理插件目录
        run: |
          find ./plugins -type f -not \( -name "*.yml" -o -name "*.conf" -o -name "*.txt" -o -name "*.jar" \) -delete

      - name: 读取 manual.txt
        id: manual
        run: |
          if [ -f "manual.txt" ]; then
            MANUAL_CONTENT=$(cat manual.txt)
            echo "content<<EOF" >> $GITHUB_OUTPUT
            echo "$MANUAL_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "content=" >> $GITHUB_OUTPUT
          fi

      - name: 打包更新文件
        run: |
          find . -type f -not \( -path "./.git*" -o -path "./.github*" -o -name ".gitattributes" -o -name "README.md" -o -name "manual.txt" \) | zip -@ update_pack.zip

      - name: 获取当前日期
        id: date
        run: |
          echo "year=$(date +'%Y')" >> $GITHUB_OUTPUT
          echo "month=$(date +'%m')" >> $GITHUB_OUTPUT
          echo "day=$(date +'%d')" >> $GITHUB_OUTPUT

      - name: 获取 Issues 并生成 Changelog
        id: changelog
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // 获取最新的 release
            let latestRelease;
            try {
              latestRelease = await github.rest.repos.getLatestRelease({
                owner,
                repo
              });
              console.log(`Found latest release: ${latestRelease.data.tag_name}`);
            } catch (error) {
              console.log('No previous release found, will include all closed issues');
            }
            
            // 获取时间范围
            const since = latestRelease ? latestRelease.data.created_at : null;
            if (since) {
              console.log(`Getting issues closed after: ${since}`);
            }
            
            // 获取所有已关闭的 issues
            const issuesResponse = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'closed',
              per_page: 100
            });
            
            console.log(`Found ${issuesResponse.data.length} total closed issues`);
            
            // 过滤出 completed 状态，非 wontfix/invalid 的 issues
            const completedIssues = issuesResponse.data.filter(issue => {
              // 排除 pull requests
              if (issue.pull_request) return false;
              
              // 只处理 close 时间在最新 release 之后的 issues
              if (since && new Date(issue.closed_at) <= new Date(since)) return false;
              
              // 排除标记为 wontfix 或 invalid 的 issues
              const labels = issue.labels.map(label => label.name.toLowerCase());
              if (labels.includes('wontfix') || labels.includes('invalid')) return false;
              
              return true;
            });
            
            console.log(`Found ${completedIssues.length} relevant issues after filtering`);
            
            // 分类 issues
            const bugFixes = [];
            const features = [];
            
            completedIssues.forEach(issue => {
              const title = issue.title
                .replace(/\[Bug\]:\s*/i, '')
                .replace(/\[Feature request\]:\s*/i, '');
              
              if (issue.title.toLowerCase().includes('[bug]')) {
                bugFixes.push({ title, number: issue.number });
              } else if (issue.title.toLowerCase().includes('[feature request]')) {
                features.push({ title, number: issue.number });
              }
            });
            
            console.log(`Categorized issues: ${bugFixes.length} bugs, ${features.length} features`);
            
            // 生成 Changelog
            let changelog = '# 📦 更新内容：\n\n';
            
            // 添加手动更改部分
            const manualContent = process.env.MANUAL_CONTENT || '';
            if (manualContent.trim()) {
              changelog += '## 手动更改\n' + manualContent + '\n\n';
            } else {
              changelog += '## 手动更改\n\n';
            }
            
            // 添加 Bug 修复部分
            changelog += '## Bug修复\n';
            if (bugFixes.length > 0) {
              bugFixes.forEach(bug => {
                changelog += `修复了${bug.title}的问题 #${bug.number}\n`;
              });
            } else {
              changelog += '无Bug修复\n';
            }
            changelog += '\n';
            
            // 添加功能更改部分
            changelog += '## 功能更改\n';
            if (features.length > 0) {
              features.forEach(feature => {
                changelog += `${feature.title} #${feature.number}\n`;
              });
            } else {
              changelog += '无功能更改\n';
            }
            
            // 输出 changelog
            core.setOutput('content', changelog);
            return changelog;
        env:
          MANUAL_CONTENT: ${{ steps.manual.outputs.content }}

      - name: 创建发布版本
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ format('{0}.{1}.{2}_{3}', steps.date.outputs.year, steps.date.outputs.month, steps.date.outputs.day, github.event.inputs.version) }}
          name: ${{ format('{0}.{1}.{2}_{3}', steps.date.outputs.year, steps.date.outputs.month, steps.date.outputs.day, github.event.inputs.version) }}
          body: ${{ steps.changelog.outputs.content }}
          files: update_pack.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
