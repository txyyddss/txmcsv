name: Create Release with Changelog

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便正确处理issues

      # 2. 替换版本号
      - name: Update version in files
        run: |
          # 替换globalscoreboard.yml中的版本号
          if [ -f "./plugins/AnimatedScoreboard/scoreboards/globalscoreboard.yml" ]; then
            sed -i "s/%server_version%/${{ github.event.inputs.version }}/g" "./plugins/AnimatedScoreboard/scoreboards/globalscoreboard.yml"
          fi
          
          # 替换globalnoseason.yml中的版本号
          if [ -f "./plugins/AnimatedScoreboard/scoreboards/globalnoseason.yml" ]; then
            sed -i "s/%server_version%/${{ github.event.inputs.version }}/g" "./plugins/AnimatedScoreboard/scoreboards/globalnoseason.yml"
          fi

      # 3. 清理plugins目录 - 只保留.yml,.conf,.txt,.jar文件和所有文件夹结构
      - name: Clean plugins directory
        run: |
          if [ -d "./plugins" ]; then
            find ./plugins -type f -not \( -name "*.yml" -o -name "*.conf" -o -name "*.txt" -o -name "*.jar" \) -delete
          fi

      # 4. 打包文件
      - name: Create update package
        run: |
          # 安装7z
          sudo apt-get update
          sudo apt-get install -y p7zip-full
          
          # 创建排除文件列表
          echo "README.md" > exclude.txt
          echo ".github/" >> exclude.txt
          echo ".git/" >> exclude.txt
          echo ".gitattributes" >> exclude.txt
          echo "manual.txt" >> exclude.txt
          echo "exclude.txt" >> exclude.txt  # 确保exclude.txt自身也被排除
          
          # 使用7z创建压缩包，使用最高压缩级别
          7z a -t7z -mx=9 -xr@exclude.txt update_pack.7z ./

      # 5. 生成更新日志
      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // 获取最新的release
            let latestReleaseDate = null;
            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              latestReleaseDate = new Date(latestRelease.data.created_at);
              console.log(`Latest release date: ${latestReleaseDate.toISOString()}`);
            } catch (error) {
              console.log("No previous releases found, will include all issues");
            }
            
            // 使用GraphQL API查询issues (替代已弃用的search/issues endpoint)
            const query = `
              query($owner:String!, $repo:String!, $states:[IssueState!]) {
                repository(owner:$owner, name:$repo) {
                  issues(states:$states, first:100, orderBy:{field:CREATED_AT, direction:DESC}) {
                    nodes {
                      number
                      title
                      state
                      closedAt
                      labels(first:10) {
                        nodes {
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              states: ["CLOSED"]
            };
            
            const result = await github.graphql(query, variables);
            
            // 处理查询结果
            const issues = result.repository.issues.nodes
              .filter(issue => {
                // 只包括自上次发布后关闭的issues
                if (latestReleaseDate && new Date(issue.closedAt) <= latestReleaseDate) {
                  return false;
                }
                
                // 排除带有wontfix或invalid标签的issues
                const labels = issue.labels.nodes.map(label => label.name.toLowerCase());
                return !labels.includes('wontfix') && !labels.includes('invalid');
              });
            
            // 分类issues
            const bugfixes = [];
            const features = [];
            
            for (const issue of issues) {
              const title = issue.title
                .replace('[Bug]: ', '')
                .replace('[Bug]:', '')
                .replace('[Feature request]: ', '')
                .replace('[Feature request]:', '')
                .trim();
                
              if (issue.title.toLowerCase().includes('[bug]')) {
                bugfixes.push({ title, number: issue.number });
              } else if (issue.title.toLowerCase().includes('[feature')) {
                features.push({ title, number: issue.number });
              }
            }
            
            // 读取manual.txt
            let manualContent = '';
            try {
              if (fs.existsSync('manual.txt')) {
                manualContent = fs.readFileSync('manual.txt', 'utf8');
              }
            } catch (error) {
              console.log('No manual.txt found or error reading it:', error);
            }
            
            // 生成changelog内容
            let changelog = '# 📦 更新内容：\n\n';
            
            // 手动更改部分
            changelog += '## 非Issues更改\n';
            if (manualContent) {
              changelog += manualContent + '\n\n';
            } else {
              changelog += '无\n\n';
            }
            
            // Bug修复部分
            changelog += '## Bug修复\n';
            if (bugfixes.length > 0) {
              for (const bug of bugfixes) {
                changelog += `修复了${bug.title}的问题 #${bug.number}\n`;
              }
            } else {
              changelog += '无\n';
            }
            changelog += '\n';
            
            // 功能更改部分
            changelog += '## 功能更改\n';
            if (features.length > 0) {
              for (const feature of features) {
                changelog += `${feature.title} #${feature.number}\n`;
              }
            } else {
              changelog += '无\n';
            }
            
            // 保存到文件
            fs.writeFileSync('CHANGELOG.md', changelog);
            
            return changelog;

      # 6. 创建release
      - name: Create Release
        id: create_release
        run: |
          # 获取今天的日期(格式为yyyy.mm.dd)
          TODAY=$(date +'%Y.%m.%d')
          # 生成release标签
          RELEASE_TAG="${TODAY}_${{ github.event.inputs.version }}"
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_TAG }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            update_pack.7z