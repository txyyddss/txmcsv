name: Create Release

on:
  workflow_dispatch:  # 手动触发
  push:
    tags:
      - 'v*'  # 当推送带v前缀的tag时触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便获取所有issues
      
      - name: Clean plugins directory
        run: |
          if [ -d "./plugins" ]; then
            find ./plugins -type f -not \( -name "*.yml" -o -name "*.conf" -o -name "*.txt" -o -name "*.jar" \) -delete
          else
            echo "Plugins directory not found, skipping cleanup."
          fi
      
      - name: Create release.zip
        run: |
          zip -r release.zip . -x "README.md" ".github/*" ".gitattributes"
      
      - name: Generate changelog and release tag
        id: changelog
        uses: actions/github-script@v6
        with:
          script: |
            const today = new Date();
            const releaseTag = `${today.getFullYear()}.${String(today.getMonth() + 1).padStart(2, '0')}.${String(today.getDate()).padStart(2, '0')}`;
            core.exportVariable('RELEASE_TAG', releaseTag);
            
            // 获取最新release的日期
            let lastReleaseDate = null;
            try {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1
              });
              
              if (releases.length > 0) {
                lastReleaseDate = new Date(releases[0].published_at);
                console.log(`Last release date: ${lastReleaseDate.toISOString()}`);
              }
            } catch (error) {
              console.log("No previous releases found or error occurred:", error);
            }
            
            // 获取所有已关闭的issues
            const allIssues = [];
            let page = 1;
            let hasMoreIssues = true;
            
            while (hasMoreIssues) await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                per_page: 100,
                page: page
              });
              
              if (issues.length === 0) {
                hasMoreIssues = false;
              } else {
                // 过滤issues：
                // 1. 不是PR
                // 2. 没有wontfix标签
                // 3. 如果有lastReleaseDate，则只获取在该日期之后关闭的issues
                const filteredIssues = issues.filter(issue => {
                  if (issue.pull_request) return false;
                  if (issue.labels.some(label => label.name.toLowerCase() === 'wontfix')) return false;
                  if (lastReleaseDate && new Date(issue.closed_at) <= lastReleaseDate) return false;
                  return true;
                });
                
                allIssues.push(...filteredIssues);
                page++;
              }
            }
            
            console.log(`Found ${allIssues.length} relevant issues`);
            
            // 分类issues
            const bugs = [];
            const features = [];
            
            for (const issue of allIssues) {
              // 检查issue是否为bug
              const isBug = issue.labels.some(label => 
                label.name.toLowerCase().includes('bug') || 
                label.name.toLowerCase().includes('修复') || 
                label.name.toLowerCase().includes('fix')
              );
              
              if (isBug) {
                bugs.push(issue);
              } else {
                features.push(issue);
              }
            }
            
            console.log(`Bugs: ${bugs.length}, Features: ${features.length}`);
            
            // 生成changelog
            let changelog = "# 📦 更新内容：\n";
            
            changelog += "\n## Bug修复\n";
            if (bugs.length > 0) {
              for (const bug of bugs) {
                changelog += `修复了${bug.title}的问题 #${bug.number}\n`;
              }
            }
            
            changelog += "\n## 功能更改\n";
            if (features.length > 0) {
              for (const feature of features) {
                changelog += `${feature.title} #${feature.number}\n`;
              }
            }
            
            // 输出changelog
            core.setOutput('changelog', changelog);
            fs.writeFileSync('CHANGELOG.md', changelog);
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_TAG }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
