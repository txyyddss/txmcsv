name: Create Release

on:
  workflow_dispatch:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Delete unwanted files in plugins folder
        run: |
          find ./plugins -type f -not -name "*.yml" -not -name "*.conf" -not -name "*.txt" -not -name "*.jar" -delete
      
      - name: Create release.zip
        run: |
          zip -r release.zip . -x "README.md" ".github/*" ".gitattributes" "*.git*"
      
      - name: Get latest release date
        id: latest_release
        run: |
          latest_release_date=$(gh api repos/${{ github.repository }}/releases/latest --jq '.published_at' 2>/dev/null || echo "")
          if [ -z "$latest_release_date" ]; then
            echo "No previous release found, using repository creation date"
            latest_release_date=$(gh api repos/${{ github.repository }} --jq '.created_at')
          fi
          echo "latest_release_date=$latest_release_date" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate changelog
        id: changelog
        run: |
          # 将GraphQL查询保存到文件中，避免YAML格式问题
          cat > query.graphql << 'EOL'
          query($repo_owner: String!, $repo_name: String!, $since: DateTime!) {
            repository(owner: $repo_owner, name: $repo_name) {
              issues(first: 100, states: CLOSED, filterBy: {since: $since}) {
                nodes {
                  number
                  title
                  labels(first: 10) {
                    nodes {
                      name
                    }
                  }
                  closedAt
                  stateReason
                }
              }
            }
          }
          EOL
          
          # 执行GraphQL查询
          issues=$(gh api graphql -F query=@query.graphql -f repo_owner=${{ github.repository_owner }} -f repo_name=$(echo "${{ github.repository }}" | cut -d'/' -f2) -f since="${{ steps.latest_release.outputs.latest_release_date }}")
          
          # 准备changelog
          echo "# 📦 更新内容：" > changelog.md
          echo "" >> changelog.md
          
          # 处理Bug修复
          echo "## Bug修复" >> changelog.md
          
          # 将Python脚本保存到文件中，避免YAML中的转义问题
          cat > process_bugs.py << 'EOL'
import json
import sys

data = json.loads(sys.argv[1])
bug_count = 0

for issue in data["data"]["repository"]["issues"]["nodes"]:
    # 跳过标记为NOT_PLANNED的issues
    if issue.get("stateReason") == "NOT_PLANNED":
        continue
        
    # 检查是否有bug标签
    has_bug_label = False
    for label in issue["labels"]["nodes"]:
        if "bug" in label["name"].lower():
            has_bug_label = True
            break
            
    if has_bug_label:
        print("修复了{}的问题 #{}".format(issue["title"], issue["number"]))
        bug_count += 1

if bug_count == 0:
    print("")
EOL
          
          # 执行Python脚本处理Bug
          python3 process_bugs.py "$issues" >> changelog.md
          
          echo "" >> changelog.md
          
          # 处理功能更改
          echo "## 功能更改" >> changelog.md
          
          # 将Python脚本保存到文件中，避免YAML中的转义问题
          cat > process_features.py << 'EOL'
import json
import sys

data = json.loads(sys.argv[1])
feature_count = 0

for issue in data["data"]["repository"]["issues"]["nodes"]:
    # 跳过标记为NOT_PLANNED的issues
    if issue.get("stateReason") == "NOT_PLANNED":
        continue
        
    # 检查是否有功能相关标签
    has_feature_label = False
    for label in issue["labels"]["nodes"]:
        if "enhancement" in label["name"].lower() or "feature" in label["name"].lower():
            has_feature_label = True
            break
            
    if has_feature_label:
        print("{} #{}".format(issue["title"], issue["number"]))
        feature_count += 1

if feature_count == 0:
    print("")
EOL
          
          # 执行Python脚本处理功能
          python3 process_features.py "$issues" >> changelog.md
          
          cat changelog.md
          
          # 将changelog内容设置为输出
          changelog_content=$(cat changelog.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate release date
        id: date
        run: echo "release_date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.date.outputs.release_date }}
          tag_name: ${{ steps.date.outputs.release_date }}
          body: ${{ steps.changelog.outputs.content }}
          files: release.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}