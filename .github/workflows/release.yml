
name: Create Release

on:
  workflow_dispatch:  # 手动触发
    inputs:
      version:
        description: '版本号'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便获取所有issues
      
      - name: Replace version in files
        run: |
          if [ -f "./plugins/AnimatedScoreboard/scoreboards/globalscoreboard.yml" ]; then
            sed -i "s/%server_version%/${{ github.event.inputs.version }}/g" ./plugins/AnimatedScoreboard/scoreboards/globalscoreboard.yml
            echo "已替换 globalscoreboard.yml 中的版本号为 ${{ github.event.inputs.version }}"
          else
            echo "globalscoreboard.yml 文件不存在，跳过替换"
          fi
          
          if [ -f "./plugins/AnimatedScoreboard/scoreboards/globalnoseason.yml" ]; then
            sed -i "s/%server_version%/${{ github.event.inputs.version }}/g" ./plugins/AnimatedScoreboard/scoreboards/globalnoseason.yml
            echo "已替换 globalnoseason.yml 中的版本号为 ${{ github.event.inputs.version }}"
          else
            echo "globalnoseason.yml 文件不存在，跳过替换"
          fi
      
      - name: Clean plugins directory
        run: |
          if [ -d "./plugins" ]; then
            # 找出所有不符合保留条件的文件并删除它们，但保留目录结构
            find ./plugins -type f -not \( -name "*.yml" -o -name "*.conf" -o -name "*.txt" -o -name "*.jar" \) -delete
            echo "Plugins 目录清理完成，已保留所有文件夹结构和指定类型的文件"
          else
            echo "Plugins 目录不存在，跳过清理"
          fi
      
      - name: Create update_pack.zip
        run: |
          zip -r update_pack.zip . -x "README.md" ".github/*" ".git/*" ".gitattributes" "manual.txt"
          echo "已创建 update_pack.zip 文件"
      
      - name: Generate changelog and release tag
        id: changelog
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const today = new Date();
            const formattedDate = `${today.getFullYear()}.${String(today.getMonth() + 1).padStart(2, '0')}.${String(today.getDate()).padStart(2, '0')}`;
            const releaseTag = `${formattedDate}_${process.env.VERSION}`;
            core.exportVariable('RELEASE_TAG', releaseTag);
            
            console.log(`Release tag will be: ${releaseTag}`);
            
            // 获取最新release的日期
            let lastReleaseDate = null;
            try {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1
              });
              
              if (releases.length > 0) {
                lastReleaseDate = new Date(releases[0].published_at);
                console.log(`Last release date: ${lastReleaseDate.toISOString()}`);
              }
            } catch (error) {
              console.log("No previous releases found or error occurred:", error);
            }
            
            // 获取所有已关闭的issues
            const allIssues = [];
            let page = 1;
            let hasMoreIssues = true;
            
            while (hasMoreIssues) {
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'closed',
                per_page: 100,
                page: page
              });
              
              if (issues.length === 0) {
                hasMoreIssues = false;
              } else {
                // 过滤issues：
                // 1. 不是PR
                // 2. 状态为completed（已完成）
                // 3. 没有wontfix或invalid标签
                // 4. 如果有lastReleaseDate，则只获取在该日期之后关闭的issues
                const filteredIssues = issues.filter(issue => {
                  if (issue.pull_request) return false;
                  if (issue.labels.some(label => 
                    label.name.toLowerCase() === 'wontfix' || 
                    label.name.toLowerCase() === 'invalid'
                  )) return false;
                  if (lastReleaseDate && new Date(issue.closed_at) <= lastReleaseDate) return false;
                  return true;
                });
                
                allIssues.push(...filteredIssues);
                page++;
                
                // 如果获取的issues数量小于每页数量，说明没有更多issues了
                if (issues.length < 100) {
                  hasMoreIssues = false;
                }
              }
            }
            
            console.log(`Found ${allIssues.length} relevant issues`);
            
            // 分类issues
            const bugs = [];
            const features = [];
            
            for (const issue of allIssues) {
              // 处理标题，去除前缀
              let title = issue.title;
              title = title.replace(/^\[Bug\]:\s*/i, "").replace(/^\[Feature request\]:\s*/i, "").trim();
              
              // 检查issue是否为bug
              const isBug = issue.labels.some(label => 
                label.name.toLowerCase().includes('bug') || 
                label.name.toLowerCase().includes('修复') || 
                label.name.toLowerCase().includes('fix')
              ) || issue.title.toLowerCase().includes('[bug]');
              
              if (isBug) {
                bugs.push({...issue, cleanTitle: title});
              } else {
                features.push({...issue, cleanTitle: title});
              }
            }
            
            console.log(`Bugs: ${bugs.length}, Features: ${features.length}`);
            
            // 生成changelog
            let changelog = "# 📦 更新内容：\n";
            
            // 读取manual.txt文件内容
            let manualContent = '';
            try {
              if (fs.existsSync('manual.txt')) {
                manualContent = fs.readFileSync('manual.txt', 'utf8');
                changelog += "\n## 手动更改\n" + manualContent + "\n";
              } else {
                console.log("manual.txt file not found");
                changelog += "\n## 手动更改\n\n";
              }
            } catch (error) {
              console.log("Error reading manual.txt:", error);
              changelog += "\n## 手动更改\n\n";
            }
            
            changelog += "\n## Bug修复\n";
            if (bugs.length > 0) {
              for (const bug of bugs) {
                changelog += `修复了${bug.cleanTitle}的问题 #${bug.number}\n`;
              }
            }
            
            changelog += "\n## 功能更改\n";
            if (features.length > 0) {
              for (const feature of features) {
                changelog += `${feature.cleanTitle} #${feature.number}\n`;
              }
            }
            
            // 输出changelog
            core.setOutput('changelog', changelog);
            fs.writeFileSync('CHANGELOG.md', changelog);
          env:
            VERSION: ${{ github.event.inputs.version }}
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_TAG }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            update_pack.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
