name: Auto Release Pipeline

on:
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Clean plugins directory
      run: |
        find ./plugins -type f -not \( -name "*.yml" -o -name "*.conf" -o -name "*.txt" -o -name "*.jar" \) -delete

    - name: Package release
      run: |
        sudo apt-get install -y zip
        zip -r release.zip . -x ".git/*"

    - name: Get previous release date
      id: previous-release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if ! gh release view latest &>/dev/null; then
          echo "date=1970-01-01T00:00:00Z" >> $GITHUB_OUTPUT
          exit 0
        fi
        latest_date=$(gh api repos/${{ github.repository }}/releases/latest --jq '.created_at')
        echo "date=${latest_date}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # 调试信息输出
        echo "前次发布日期: ${{ steps.previous-release.outputs.date }}"
        
        # 转换日期格式并编码
        encoded_date=$(echo "${{ steps.previous-release.outputs.date }}" | jq -sRr @uri)
        echo "编码后的日期参数: $encoded_date"

        # 执行API请求
        api_url="repos/${{ github.repository }}/issues?state=closed&since=$encoded_date"
        echo "请求URL: $api_url"
        
        # 获取并处理issues数据
        issues=$(gh api "$api_url" \
          --jq '[.[] | select(.state == "closed" and (any(.labels[]?; .name != "Closed as not planned"))]')
        
        # 调试输出原始数据
        echo "原始issues数据: $issues"
        
        # 构建变更日志
        changelog_content="📦 更新内容：\n"
        issue_count=$(echo "$issues" | jq 'length')
        
        if [ $issue_count -gt 0 ]; then
          echo "发现 $issue_count 个有效issue"
          echo "$issues" | jq -r '.[] | "• 修复了「\(.title)」的问题"' | while read line; do
            changelog_content+="${line}\n"
          done
        else
          echo "未找到有效issue，使用默认信息"
          changelog_content+="• 本次更新包含常规维护和优化"
        fi

        # 格式化输出
        changelog_content=$(echo -e "$changelog_content")
        echo "生成的更新内容："
        echo "$changelog_content"

        # 输出到环境变量
        delimiter=$(openssl rand -hex 16)
        echo "log<<${delimiter}" >> $GITHUB_OUTPUT
        echo "$changelog_content" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    - name: Create Git tag
      id: create-tag
      run: |
        # 生成规范的标签名称（示例：v2024.06.25）
        DATE_TAG=$(date +'v%Y.%m.%d')
        
        # 清理可能存在的非法字符
        CLEAN_TAG=$(echo "$DATE_TAG" | tr -cd '[:alnum:]._-')
        
        # 检查标签是否存在
        if git rev-parse "$CLEAN_TAG" >/dev/null 2>&1; then
          echo "删除已存在的旧标签: $CLEAN_TAG"
          git tag -d "$CLEAN_TAG"
          git push origin ":refs/tags/$CLEAN_TAG" || true
        fi

        # 配置Git身份
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # 创建带注释的标签
        git tag -a "$CLEAN_TAG" -m "自动发布版本 $CLEAN_TAG"

        # 推送标签到远程
        git push origin "$CLEAN_TAG"

        # 输出标签名称
        echo "tag=$CLEAN_TAG" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create-tag.outputs.tag }}
        name: ${{ steps.create-tag.outputs.tag }}
        body: |
          ${{ steps.changelog.outputs.log }}
        files: release.zip