name: Create Release

on:
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写入权限来创建release
      issues: read     # 需要读取权限来获取issues信息
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史记录
      
      - name: Delete unwanted files in plugins folder
        run: |
          # 删除plugins文件夹下除了.yml,.conf,.txt,.jar的所有文件，但保留文件夹结构
          find ./plugins -type f -not -name "*.yml" -not -name "*.conf" -not -name "*.txt" -not -name "*.jar" -delete
      
      - name: Create release.zip
        run: |
          # 打包除README.md，.github，.gitattributes外的所有文件为release.zip
          zip -r release.zip . -x "README.md" ".github/*" ".gitattributes" "*.git*"
      
      - name: Get latest release date
        id: latest_release
        run: |
          # 获取最新release的发布日期，如果没有则使用仓库创建日期
          latest_release_date=$(gh api repos/${{ github.repository }}/releases/latest --jq '.published_at' 2>/dev/null || echo "")
          if [ -z "$latest_release_date" ]; then
            echo "No previous release found, using repository creation date"
            latest_release_date=$(gh api repos/${{ github.repository }} --jq '.created_at')
          fi
          echo "latest_release_date=$latest_release_date" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate changelog
        id: changelog
        run: |
          # 获取上次发布以来的所有已完成的issues
          issues=$(gh api graphql -f query='
            query($repo_owner:String!, $repo_name:String!, $since:DateTime!) {
              repository(owner: $repo_owner, name: $repo_name) {
                issues(states: CLOSED, filterBy: {since: $since}) {
                  nodes {
                    number
                    title
                    labels(first: 10) {
                      nodes {
                        name
                      }
                    }
                    closedAt
                    closedStateReason
                  }
                }
              }
            }' -f repo_owner=${{ github.repository_owner }} -f repo_name=$(echo "${{ github.repository }}" | cut -d'/' -f2) -f since="${{ steps.latest_release.outputs.latest_release_date }}")
          
          # 准备changelog
          echo "# 📦 更新内容：" > changelog.md
          echo "" >> changelog.md
          
          # 处理Bug修复
          echo "## Bug修复" >> changelog.md
          
          # 使用Python处理JSON数据
          python3 -c '
          import json, sys
          data = json.loads(sys.argv[1])
          bug_count = 0
          
          for issue in data["data"]["repository"]["issues"]["nodes"]:
              # 跳过标记为NOT_PLANNED的issues
              if issue.get("closedStateReason") == "NOT_PLANNED":
                  continue
                  
              # 检查是否有bug标签
              has_bug_label = False
              for label in issue["labels"]["nodes"]:
                  if "bug" in label["name"].lower():
                      has_bug_label = True
                      break
                      
              if has_bug_label:
                  print(f"修复了{issue[\"title\"]}的问题 #{issue[\"number\"]}")
                  bug_count += 1
          
          if bug_count == 0:
              print("")
          ' "$issues" >> changelog.md
          
          echo "" >> changelog.md
          
          # 处理功能更改
          echo "## 功能更改" >> changelog.md
          
          python3 -c '
          import json, sys
          data = json.loads(sys.argv[1])
          feature_count = 0
          
          for issue in data["data"]["repository"]["issues"]["nodes"]:
              # 跳过标记为NOT_PLANNED的issues
              if issue.get("closedStateReason") == "NOT_PLANNED":
                  continue
                  
              # 检查是否有功能相关标签
              has_feature_label = False
              for label in issue["labels"]["nodes"]:
                  if "enhancement" in label["name"].lower() or "feature" in label["name"].lower():
                      has_feature_label = True
                      break
                      
              if has_feature_label:
                  print(f"{issue[\"title\"]} #{issue[\"number\"]}")
                  feature_count += 1
          
          if feature_count == 0:
              print("")
          ' "$issues" >> changelog.md
          
          cat changelog.md
          
          # 将changelog内容设置为输出
          changelog_content=$(cat changelog.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate release date
        id: date
        run: echo "release_date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.date.outputs.release_date }}
          tag_name: ${{ steps.date.outputs.release_date }}
          body: ${{ steps.changelog.outputs.content }}
          files: release.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}