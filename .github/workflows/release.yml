name: Create Release

on:
  workflow_dispatch:    # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整历史以便获取上一个 release
      
      - name: Clean plugins directory
        run: |
          if [ -d "./plugins" ]; then
            find ./plugins -type f -not \( -name "*.yml" -o -name "*.conf" -o -name "*.txt" -o -name "*.jar" \) -delete
          fi
      
      - name: Create release zip
        run: |
          zip -r release.zip . -x "README.md" ".github/*" ".gitattributes"
      
      - name: Generate changelog
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取最新 release 的日期
          LAST_RELEASE=$(gh release list --limit 1)
          if [ -n "$LAST_RELEASE" ]; then
            LAST_RELEASE_DATE=$(echo "$LAST_RELEASE" | awk '{print $3}')
            echo "Last release date: $LAST_RELEASE_DATE"
          else
            # 如果没有找到上一个 release，使用一个较早的日期
            LAST_RELEASE_DATE="1970-01-01"
            echo "No previous release found, using date: $LAST_RELEASE_DATE"
          fi
          
          # 创建临时文件存储 bug fixes 和 features
          > bug_fixes.txt
          > features.txt
          
          # 获取从上一个 release 以来关闭的 issues
          # 排除标记为 "Closed as not planned" 的 issues
          ISSUES=$(gh issue list --state closed --search "closed:>$LAST_RELEASE_DATE -label:\"Closed as not planned\"" --json number,title,labels --limit 100)
          
          # 检查是否有 issues
          if [ -z "$ISSUES" ] || [ "$ISSUES" == "[]" ]; then
            echo "No issues found since last release"
          else
            # 使用 jq 一次性处理所有 issues，避免在循环中处理
            echo "$ISSUES" | jq -r '.[] | select(.labels | map(.name | ascii_downcase) | any(contains("bug"))) | "修复了\(.title)的问题 #\(.number)"' > bug_fixes.txt
            echo "$ISSUES" | jq -r '.[] | select(.labels | map(.name | ascii_downcase) | any(contains("feature") or contains("enhancement"))) | "\(.title) #\(.number)"' > features.txt
          fi
          
          # 创建 changelog
          echo "# 📦 更新内容：" > changelog.md
          echo "## Bug修复" >> changelog.md
          if [ -s bug_fixes.txt ]; then
            cat bug_fixes.txt >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## 功能更改" >> changelog.md
          if [ -s features.txt ]; then
            cat features.txt >> changelog.md
          fi
          
          # 显示生成的 changelog
          cat changelog.md
      
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 生成日期格式的 tag
          TAG=$(date +'%Y.%m.%d')
          
          # 创建 release
          gh release create "$TAG" \
            --title "$TAG" \
            --notes-file changelog.md \
            release.zip