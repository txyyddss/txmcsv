name: Auto Release Pipeline

on:
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean plugins directory
      run: |
        find ./plugins -type f -not \( -name "*.yml" -o -name "*.conf" -o -name "*.txt" -o -name "*.jar" \) -delete

    - name: Package release
      run: |
        sudo apt-get install -y zip
        zip -r release.zip . -x ".git/*"

    - name: Get previous release date
      id: previous-release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        latest_date=$(gh api repos/${{ github.repository }}/releases/latest --jq '.created_at' 2>/dev/null || true)
        echo "date=${latest_date:-1970-01-01T00:00:00Z}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        issues=$(gh api "repos/${{ github.repository }}/issues?state=closed&since=${{ steps.previous-release.outputs.date }}" \
          --jq '[.[] | select(any(.labels[]; .name != "Closed as not planned"))]')
        
        changelog_content="📦 更新内容：\n"
        
        if [ $(echo "$issues" | jq length) -gt 0 ]; then
          changelog_content+=$(echo "$issues" | jq -r '.[].title' | while read -r title; do
            echo "• 修复了「${title}」的问题"
          done | tr '\n' '\n')
        else
          changelog_content+="• 本次更新包含常规维护和优化"
        fi

        echo "log<<EOF" >> $GITHUB_OUTPUT
        echo -e "$changelog_content" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: release-$(date +'%Y.%m.%d')
        name: $(date +'%Y.%m')
        body: |
          ${{ steps.changelog.outputs.log }}
        files: release.zip